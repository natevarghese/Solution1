//
// Auto-generated from generator.cs, do not edit
//
// We keep references to objects, so warning 414 is expected
#pragma warning disable 414
using System;
using System.Drawing;
using System.Diagnostics;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Runtime.Versioning;
using System.Runtime.InteropServices;
using System.Diagnostics.CodeAnalysis;
using UIKit;
using GLKit;
using Metal;
using CoreML;
using MapKit;
using Photos;
using ModelIO;
using Network;
using SceneKit;
using Contacts;
using Security;
using Messages;
using AudioUnit;
using CoreVideo;
using CoreMedia;
using QuickLook;
using CoreImage;
using SpriteKit;
using Foundation;
using CoreMotion;
using ObjCRuntime;
using AddressBook;
using MediaPlayer;
using GameplayKit;
using CoreGraphics;
using CoreLocation;
using AVFoundation;
using NewsstandKit;
using FileProvider;
using CoreAnimation;
using CoreFoundation;
using NetworkExtension;
using MetalPerformanceShadersGraph;
#nullable enable
#if !NET
using NativeHandle = System.IntPtr;
#endif
namespace Mapbox.Bindings.Objc {
	[Register("_TtC20Mapbox_Bindings_Objc14MapViewFactory", true)]
	public unsafe partial class MapViewFactory : NSObject {
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		static readonly NativeHandle class_ptr = Class.GetHandle ("_TtC20Mapbox_Bindings_Objc14MapViewFactory");
		/// <summary>The Objective-C class handle for this class.</summary>
		/// <value>The pointer to the Objective-C class.</value>
		/// <remarks>
		///     Each managed class mirrors an unmanaged Objective-C class.
		///     This value contains the pointer to the Objective-C class.
		///     It is similar to calling the managed <see cref="ObjCRuntime.Class.GetHandle(string)" /> or the native <see href="https://developer.apple.com/documentation/objectivec/1418952-objc_getclass">objc_getClass</see> method with the type name.
		/// </remarks>
		public override NativeHandle ClassHandle { get { return class_ptr; } }
		/// <summary>Creates a new <see cref="MapViewFactory" /> with default values.</summary>
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		[EditorBrowsable (EditorBrowsableState.Advanced)]
		[Export ("init")]
		public MapViewFactory () : base (NSObjectFlag.Empty)
		{
			IsDirectBinding = GetType ().Assembly == global::ApiDefinition.Messaging.this_assembly;
			if (IsDirectBinding) {
				InitializeHandle (global::ApiDefinition.Messaging.IntPtr_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("init")), "init");
			} else {
				InitializeHandle (global::ApiDefinition.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, global::ObjCRuntime.Selector.GetHandle ("init")), "init");
			}
		}

		/// <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
		/// <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
		/// <remarks>
		///     <para>
		///         This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the <see cref="Foundation.NSObject" />.
		///         This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.
		///         When developers invoke this constructor, they take advantage of a direct path that goes all the way up to <see cref="Foundation.NSObject" /> to merely allocate the object's memory and bind the Objective-C and C# objects together.
		///         The actual initialization of the object is up to the developer.
		///     </para>
		///     <para>
		///         This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.
		///         Once the allocation has taken place, the constructor has to initialize the object.
		///         With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
		///     </para>
		///     <para>It is the developer's responsibility to completely initialize the object if they chain up using this constructor chain.</para>
		///     <para>
		///         In general, if the developer's constructor invokes the corresponding base implementation, then it should also call an Objective-C init method.
		///         If this is not the case, developers should instead chain to the proper constructor in their class.
		///     </para>
		///     <para>
		///         The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic <see cref="Foundation.NSObject" /> allocation and runtime type registration.
		///         Typically the chaining would look like this:
		///     </para>
		///     <example>
		///             <code lang="csharp lang-csharp"><![CDATA[
		/// //
		/// // The NSObjectFlag constructor merely allocates the object and registers the C# class with the Objective-C runtime if necessary.
		/// // No actual initXxx method is invoked, that is done later in the constructor
		/// //
		/// // This is taken from the iOS SDK's source code for the UIView class:
		/// //
		/// [Export ("initWithFrame:")]
		/// public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
		/// {
		///     // Invoke the init method now.
		///     var initWithFrame = new Selector ("initWithFrame:").Handle;
		///     if (IsDirectBinding) {
		///         Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
		///     } else {
		///         Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
		///     }
		/// }
		/// ]]></code>
		///     </example>
		/// </remarks>
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		[EditorBrowsable (EditorBrowsableState.Advanced)]
		protected MapViewFactory (NSObjectFlag t) : base (t)
		{
			IsDirectBinding = GetType ().Assembly == global::ApiDefinition.Messaging.this_assembly;
		}

		/// <summary>A constructor used when creating managed representations of unmanaged objects. Called by the runtime.</summary>
		/// <param name="handle">Pointer (handle) to the unmanaged object.</param>
		/// <remarks>
		///     <para>
		///         This constructor is invoked by the runtime infrastructure (<see cref="ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.
		///         Developers should not invoke this method directly, instead they should call <see cref="ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" /> as it will prevent two instances of a managed object pointing to the same native object.
		///     </para>
		/// </remarks>
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		[EditorBrowsable (EditorBrowsableState.Advanced)]
		protected internal MapViewFactory (NativeHandle handle) : base (handle)
		{
			IsDirectBinding = GetType ().Assembly == global::ApiDefinition.Messaging.this_assembly;
		}

		[Export ("addFillLayerWithMapView:id:sourceId:visible:predicateId:referenceLayer:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void AddFillLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id, string sourceId, bool visible, string? predicateId, string? referenceLayer)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (sourceId is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (sourceId));
			var nsid = CFString.CreateNative (id);
			var nssourceId = CFString.CreateNative (sourceId);
			var nspredicateId = CFString.CreateNative (predicateId);
			var nsreferenceLayer = CFString.CreateNative (referenceLayer);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("addFillLayerWithMapView:id:sourceId:visible:predicateId:referenceLayer:"), mapView__handle__, nsid, nssourceId, visible ? (byte) 1 : (byte) 0, nspredicateId, nsreferenceLayer);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("addFillLayerWithMapView:id:sourceId:visible:predicateId:referenceLayer:"), mapView__handle__, nsid, nssourceId, visible ? (byte) 1 : (byte) 0, nspredicateId, nsreferenceLayer);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nssourceId);
			CFString.ReleaseNative (nspredicateId);
			CFString.ReleaseNative (nsreferenceLayer);
		}
		[Export ("addHeatMapLayerWithMapView:id:visible:intensity:opacity:radius:stops:colors:referenceLayer:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void AddHeatMapLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id, bool visible, double intensity, double opacity, double radius, NSNumber[] stops, global::UIKit.UIColor[] colors, string? referenceLayer)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (stops is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (stops));
			if (colors is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (colors));
			var nsid = CFString.CreateNative (id);
			var nsa_stops = NSArray.FromNSObjects (stops);
			var nsa_colors = NSArray.FromNSObjects (colors);
			var nsreferenceLayer = CFString.CreateNative (referenceLayer);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_bool_Double_Double_Double_NativeHandle_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("addHeatMapLayerWithMapView:id:visible:intensity:opacity:radius:stops:colors:referenceLayer:"), mapView__handle__, nsid, visible ? (byte) 1 : (byte) 0, intensity, opacity, radius, nsa_stops.Handle, nsa_colors.Handle, nsreferenceLayer);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_bool_Double_Double_Double_NativeHandle_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("addHeatMapLayerWithMapView:id:visible:intensity:opacity:radius:stops:colors:referenceLayer:"), mapView__handle__, nsid, visible ? (byte) 1 : (byte) 0, intensity, opacity, radius, nsa_stops.Handle, nsa_colors.Handle, nsreferenceLayer);
			}
			CFString.ReleaseNative (nsid);
			nsa_stops.Dispose ();
			nsa_colors.Dispose ();
			CFString.ReleaseNative (nsreferenceLayer);
		}
		[Export ("addImageOverlaySourceWithMapView:id:url:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void AddImageOverlaySourceWithMapView (global::Mapbox.Maps.MapView mapView, string id, string url)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (url is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (url));
			var nsid = CFString.CreateNative (id);
			var nsurl = CFString.CreateNative (url);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("addImageOverlaySourceWithMapView:id:url:"), mapView__handle__, nsid, nsurl);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("addImageOverlaySourceWithMapView:id:url:"), mapView__handle__, nsid, nsurl);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nsurl);
		}
		[Export ("addLineLayerWithMapView:id:sourceId:visible:predicateId:referenceLayer:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void AddLineLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id, string sourceId, bool visible, string? predicateId, string? referenceLayer)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (sourceId is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (sourceId));
			var nsid = CFString.CreateNative (id);
			var nssourceId = CFString.CreateNative (sourceId);
			var nspredicateId = CFString.CreateNative (predicateId);
			var nsreferenceLayer = CFString.CreateNative (referenceLayer);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("addLineLayerWithMapView:id:sourceId:visible:predicateId:referenceLayer:"), mapView__handle__, nsid, nssourceId, visible ? (byte) 1 : (byte) 0, nspredicateId, nsreferenceLayer);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("addLineLayerWithMapView:id:sourceId:visible:predicateId:referenceLayer:"), mapView__handle__, nsid, nssourceId, visible ? (byte) 1 : (byte) 0, nspredicateId, nsreferenceLayer);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nssourceId);
			CFString.ReleaseNative (nspredicateId);
			CFString.ReleaseNative (nsreferenceLayer);
		}
		[Export ("addLineLayerWithMapView:id:sourceId:sourceLayer:visible:color:lineWidth:predicateKey:predicateId:referenceLayer:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void AddLineLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id, string sourceId, string sourceLayer, bool visible, global::UIKit.UIColor color, double lineWidth, string predicateKey, string? predicateId, string? referenceLayer)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (sourceId is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (sourceId));
			if (sourceLayer is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (sourceLayer));
			var color__handle__ = color!.GetNonNullHandle (nameof (color));
			if (predicateKey is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (predicateKey));
			var nsid = CFString.CreateNative (id);
			var nssourceId = CFString.CreateNative (sourceId);
			var nssourceLayer = CFString.CreateNative (sourceLayer);
			var nspredicateKey = CFString.CreateNative (predicateKey);
			var nspredicateId = CFString.CreateNative (predicateId);
			var nsreferenceLayer = CFString.CreateNative (referenceLayer);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle_Double_NativeHandle_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("addLineLayerWithMapView:id:sourceId:sourceLayer:visible:color:lineWidth:predicateKey:predicateId:referenceLayer:"), mapView__handle__, nsid, nssourceId, nssourceLayer, visible ? (byte) 1 : (byte) 0, color__handle__, lineWidth, nspredicateKey, nspredicateId, nsreferenceLayer);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle_Double_NativeHandle_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("addLineLayerWithMapView:id:sourceId:sourceLayer:visible:color:lineWidth:predicateKey:predicateId:referenceLayer:"), mapView__handle__, nsid, nssourceId, nssourceLayer, visible ? (byte) 1 : (byte) 0, color__handle__, lineWidth, nspredicateKey, nspredicateId, nsreferenceLayer);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nssourceId);
			CFString.ReleaseNative (nssourceLayer);
			CFString.ReleaseNative (nspredicateKey);
			CFString.ReleaseNative (nspredicateId);
			CFString.ReleaseNative (nsreferenceLayer);
		}
		[Export ("addRasterTileLayerWithMapView:id:visible:minZoom:maxZoom:referenceLayer:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void AddRasterTileLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id, bool visible, double minZoom, double maxZoom, string? referenceLayer)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			var nsid = CFString.CreateNative (id);
			var nsreferenceLayer = CFString.CreateNative (referenceLayer);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_bool_Double_Double_NativeHandle (this.Handle, Selector.GetHandle ("addRasterTileLayerWithMapView:id:visible:minZoom:maxZoom:referenceLayer:"), mapView__handle__, nsid, visible ? (byte) 1 : (byte) 0, minZoom, maxZoom, nsreferenceLayer);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_bool_Double_Double_NativeHandle (this.SuperHandle, Selector.GetHandle ("addRasterTileLayerWithMapView:id:visible:minZoom:maxZoom:referenceLayer:"), mapView__handle__, nsid, visible ? (byte) 1 : (byte) 0, minZoom, maxZoom, nsreferenceLayer);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nsreferenceLayer);
		}
		[Export ("addRasterTileSourceWithMapView:id:urls:tileSize:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void AddRasterTileSourceWithMapView (global::Mapbox.Maps.MapView mapView, string id, string[] urls, double tileSize)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (urls is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (urls));
			var nsid = CFString.CreateNative (id);
			var nsa_urls = NSArray.FromStrings (urls);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_Double (this.Handle, Selector.GetHandle ("addRasterTileSourceWithMapView:id:urls:tileSize:"), mapView__handle__, nsid, nsa_urls.Handle, tileSize);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_Double (this.SuperHandle, Selector.GetHandle ("addRasterTileSourceWithMapView:id:urls:tileSize:"), mapView__handle__, nsid, nsa_urls.Handle, tileSize);
			}
			CFString.ReleaseNative (nsid);
			nsa_urls.Dispose ();
		}
		[Export ("addSourceWithMapView:id:geoJson:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void AddSourceWithMapView (global::Mapbox.Maps.MapView mapView, string id, string geoJson)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (geoJson is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (geoJson));
			var nsid = CFString.CreateNative (id);
			var nsgeoJson = CFString.CreateNative (geoJson);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("addSourceWithMapView:id:geoJson:"), mapView__handle__, nsid, nsgeoJson);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("addSourceWithMapView:id:geoJson:"), mapView__handle__, nsid, nsgeoJson);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nsgeoJson);
		}
		[Export ("addStyleImageWithMapView:id:base64:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void AddStyleImageWithMapView (global::Mapbox.Maps.MapView mapView, string id, string base64)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (base64 is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (base64));
			var nsid = CFString.CreateNative (id);
			var nsbase64 = CFString.CreateNative (base64);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("addStyleImageWithMapView:id:base64:"), mapView__handle__, nsid, nsbase64);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("addStyleImageWithMapView:id:base64:"), mapView__handle__, nsid, nsbase64);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nsbase64);
		}
		[Export ("addSymbolLayerWithMapView:id:sourceId:visible:minZoom:predicateId:referenceLayer:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void AddSymbolLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id, string sourceId, bool visible, double minZoom, string? predicateId, string? referenceLayer)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (sourceId is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (sourceId));
			var nsid = CFString.CreateNative (id);
			var nssourceId = CFString.CreateNative (sourceId);
			var nspredicateId = CFString.CreateNative (predicateId);
			var nsreferenceLayer = CFString.CreateNative (referenceLayer);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_bool_Double_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("addSymbolLayerWithMapView:id:sourceId:visible:minZoom:predicateId:referenceLayer:"), mapView__handle__, nsid, nssourceId, visible ? (byte) 1 : (byte) 0, minZoom, nspredicateId, nsreferenceLayer);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_bool_Double_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("addSymbolLayerWithMapView:id:sourceId:visible:minZoom:predicateId:referenceLayer:"), mapView__handle__, nsid, nssourceId, visible ? (byte) 1 : (byte) 0, minZoom, nspredicateId, nsreferenceLayer);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nssourceId);
			CFString.ReleaseNative (nspredicateId);
			CFString.ReleaseNative (nsreferenceLayer);
		}
		[Export ("addVectorTileSourceWithMapView:id:url:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void AddVectorTileSourceWithMapView (global::Mapbox.Maps.MapView mapView, string id, string url)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (url is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (url));
			var nsid = CFString.CreateNative (id);
			var nsurl = CFString.CreateNative (url);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("addVectorTileSourceWithMapView:id:url:"), mapView__handle__, nsid, nsurl);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("addVectorTileSourceWithMapView:id:url:"), mapView__handle__, nsid, nsurl);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nsurl);
		}
		[Export ("CoordinatePointAtPointWithMapView:point:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual CGPoint CoordinatePointAtPointWithMapView (global::Mapbox.Maps.MapView mapView, CGPoint point)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			CGPoint ret;
			if (IsDirectBinding) {
				if (global::ObjCRuntime.Runtime.IsARM64CallingConvention) {
					ret = global::ApiDefinition.Messaging.CGPoint_objc_msgSend_NativeHandle_CGPoint (this.Handle, Selector.GetHandle ("CoordinatePointAtPointWithMapView:point:"), mapView__handle__, point);
				} else if (IntPtr.Size == 8) {
					ret = global::ApiDefinition.Messaging.CGPoint_objc_msgSend_NativeHandle_CGPoint (this.Handle, Selector.GetHandle ("CoordinatePointAtPointWithMapView:point:"), mapView__handle__, point);
				} else if (Runtime.Arch == Arch.DEVICE) {
					ret = global::ApiDefinition.Messaging.CGPoint_objc_msgSend_stret_NativeHandle_CGPoint (this.Handle, Selector.GetHandle ("CoordinatePointAtPointWithMapView:point:"), mapView__handle__, point);
				} else {
					ret = global::ApiDefinition.Messaging.CGPoint_objc_msgSend_NativeHandle_CGPoint (this.Handle, Selector.GetHandle ("CoordinatePointAtPointWithMapView:point:"), mapView__handle__, point);
				}
			} else {
				if (global::ObjCRuntime.Runtime.IsARM64CallingConvention) {
					ret = global::ApiDefinition.Messaging.CGPoint_objc_msgSendSuper_NativeHandle_CGPoint (this.SuperHandle, Selector.GetHandle ("CoordinatePointAtPointWithMapView:point:"), mapView__handle__, point);
				} else if (IntPtr.Size == 8) {
					ret = global::ApiDefinition.Messaging.CGPoint_objc_msgSendSuper_NativeHandle_CGPoint (this.SuperHandle, Selector.GetHandle ("CoordinatePointAtPointWithMapView:point:"), mapView__handle__, point);
				} else if (Runtime.Arch == Arch.DEVICE) {
					ret = global::ApiDefinition.Messaging.CGPoint_objc_msgSendSuper_stret_NativeHandle_CGPoint (this.SuperHandle, Selector.GetHandle ("CoordinatePointAtPointWithMapView:point:"), mapView__handle__, point);
				} else {
					ret = global::ApiDefinition.Messaging.CGPoint_objc_msgSendSuper_NativeHandle_CGPoint (this.SuperHandle, Selector.GetHandle ("CoordinatePointAtPointWithMapView:point:"), mapView__handle__, point);
				}
			}
			return ret!;
		}
		[Export ("createWithFrame:mapInitOptions:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual global::Mapbox.Maps.MapView CreateWithFrame (CGRect frame, global::Mapbox.Maps.MapInitOptions mapInitOptions)
		{
			var mapInitOptions__handle__ = mapInitOptions!.GetNonNullHandle (nameof (mapInitOptions));
			if (IsDirectBinding) {
				return  Runtime.GetNSObject<global::Mapbox.Maps.MapView> (global::ApiDefinition.Messaging.NativeHandle_objc_msgSend_CGRect_NativeHandle (this.Handle, Selector.GetHandle ("createWithFrame:mapInitOptions:"), frame, mapInitOptions__handle__), false)!;
			} else {
				return  Runtime.GetNSObject<global::Mapbox.Maps.MapView> (global::ApiDefinition.Messaging.NativeHandle_objc_msgSendSuper_CGRect_NativeHandle (this.SuperHandle, Selector.GetHandle ("createWithFrame:mapInitOptions:"), frame, mapInitOptions__handle__), false)!;
			}
		}
		[Export ("featuresAtPointWithMapView:point:completed:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public unsafe virtual void FeaturesAtPointWithMapView (global::Mapbox.Maps.MapView mapView, CGPoint point, [BlockProxy (typeof (ObjCRuntime.Trampolines.NIDActionArity1V0))]global::System.Action<NSArray<NSString>> completed)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (completed is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (completed));
			using var block_completed = Trampolines.SDActionArity1V0.CreateBlock (completed);
			BlockLiteral *block_ptr_completed = &block_completed;
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_CGPoint_NativeHandle (this.Handle, Selector.GetHandle ("featuresAtPointWithMapView:point:completed:"), mapView__handle__, point, (IntPtr) block_ptr_completed);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_CGPoint_NativeHandle (this.SuperHandle, Selector.GetHandle ("featuresAtPointWithMapView:point:completed:"), mapView__handle__, point, (IntPtr) block_ptr_completed);
			}
		}
		[Export ("getAllLayerIdentifiersWithMapView:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual string[] GetAllLayerIdentifiersWithMapView (global::Mapbox.Maps.MapView mapView)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (IsDirectBinding) {
				return CFArray.StringArrayFromHandle (global::ApiDefinition.Messaging.NativeHandle_objc_msgSend_NativeHandle (this.Handle, Selector.GetHandle ("getAllLayerIdentifiersWithMapView:"), mapView__handle__), false)!;
			} else {
				return CFArray.StringArrayFromHandle (global::ApiDefinition.Messaging.NativeHandle_objc_msgSendSuper_NativeHandle (this.SuperHandle, Selector.GetHandle ("getAllLayerIdentifiersWithMapView:"), mapView__handle__), false)!;
			}
		}
		[Export ("getAllSourceIdentifiersWithMapView:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual string[] GetAllSourceIdentifiersWithMapView (global::Mapbox.Maps.MapView mapView)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (IsDirectBinding) {
				return CFArray.StringArrayFromHandle (global::ApiDefinition.Messaging.NativeHandle_objc_msgSend_NativeHandle (this.Handle, Selector.GetHandle ("getAllSourceIdentifiersWithMapView:"), mapView__handle__), false)!;
			} else {
				return CFArray.StringArrayFromHandle (global::ApiDefinition.Messaging.NativeHandle_objc_msgSendSuper_NativeHandle (this.SuperHandle, Selector.GetHandle ("getAllSourceIdentifiersWithMapView:"), mapView__handle__), false)!;
			}
		}
		[Export ("getBoundsWithMapView:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual MapBounds GetBoundsWithMapView (global::Mapbox.Maps.MapView mapView)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (IsDirectBinding) {
				return  Runtime.GetNSObject<MapBounds> (global::ApiDefinition.Messaging.NativeHandle_objc_msgSend_NativeHandle (this.Handle, Selector.GetHandle ("getBoundsWithMapView:"), mapView__handle__), false)!;
			} else {
				return  Runtime.GetNSObject<MapBounds> (global::ApiDefinition.Messaging.NativeHandle_objc_msgSendSuper_NativeHandle (this.SuperHandle, Selector.GetHandle ("getBoundsWithMapView:"), mapView__handle__), false)!;
			}
		}
		[Export ("layerExistsWithMapView:id:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual bool LayerExistsWithMapView (global::Mapbox.Maps.MapView mapView, string id)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			var nsid = CFString.CreateNative (id);
			byte ret;
			if (IsDirectBinding) {
				ret = global::ApiDefinition.Messaging.bool_objc_msgSend_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("layerExistsWithMapView:id:"), mapView__handle__, nsid);
			} else {
				ret = global::ApiDefinition.Messaging.bool_objc_msgSendSuper_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("layerExistsWithMapView:id:"), mapView__handle__, nsid);
			}
			CFString.ReleaseNative (nsid);
			return ret != 0;
		}
		[Export ("moveCameraToBoundsWithMapView:bounds:padding:duration:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void MoveCameraToBoundsWithMapView (global::Mapbox.Maps.MapView mapView, LatLng[] bounds, global::UIKit.UIEdgeInsets padding, double duration)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (bounds is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (bounds));
			var nsa_bounds = NSArray.FromNSObjects (bounds);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_UIEdgeInsets_Double (this.Handle, Selector.GetHandle ("moveCameraToBoundsWithMapView:bounds:padding:duration:"), mapView__handle__, nsa_bounds.Handle, padding, duration);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_UIEdgeInsets_Double (this.SuperHandle, Selector.GetHandle ("moveCameraToBoundsWithMapView:bounds:padding:duration:"), mapView__handle__, nsa_bounds.Handle, padding, duration);
			}
			nsa_bounds.Dispose ();
		}
		[Export ("removeLayerWithMapView:id:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void RemoveLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			var nsid = CFString.CreateNative (id);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("removeLayerWithMapView:id:"), mapView__handle__, nsid);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("removeLayerWithMapView:id:"), mapView__handle__, nsid);
			}
			CFString.ReleaseNative (nsid);
		}
		[Export ("removeSourceWithMapView:id:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void RemoveSourceWithMapView (global::Mapbox.Maps.MapView mapView, string id)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			var nsid = CFString.CreateNative (id);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("removeSourceWithMapView:id:"), mapView__handle__, nsid);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("removeSourceWithMapView:id:"), mapView__handle__, nsid);
			}
			CFString.ReleaseNative (nsid);
		}
		[Export ("setCenterAndZoomWithMapView:latitude:longitude:zoom:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void SetCenterAndZoomWithMapView (global::Mapbox.Maps.MapView mapView, double latitude, double longitude, double zoom)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_Double_Double_Double (this.Handle, Selector.GetHandle ("setCenterAndZoomWithMapView:latitude:longitude:zoom:"), mapView__handle__, latitude, longitude, zoom);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_Double_Double_Double (this.SuperHandle, Selector.GetHandle ("setCenterAndZoomWithMapView:latitude:longitude:zoom:"), mapView__handle__, latitude, longitude, zoom);
			}
		}
		[Export ("setDisputedBoundriesWithMapView:ids:key:value:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void SetDisputedBoundriesWithMapView (global::Mapbox.Maps.MapView mapView, string[] ids, string key, string value)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (ids is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (ids));
			if (key is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (key));
			if (value is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (value));
			var nsa_ids = NSArray.FromStrings (ids);
			var nskey = CFString.CreateNative (key);
			var nsvalue = CFString.CreateNative (value);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("setDisputedBoundriesWithMapView:ids:key:value:"), mapView__handle__, nsa_ids.Handle, nskey, nsvalue);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("setDisputedBoundriesWithMapView:ids:key:value:"), mapView__handle__, nsa_ids.Handle, nskey, nsvalue);
			}
			nsa_ids.Dispose ();
			CFString.ReleaseNative (nskey);
			CFString.ReleaseNative (nsvalue);
		}
		[Export ("setLayerVisibilityWithMapView:id:visible:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void SetLayerVisibilityWithMapView (global::Mapbox.Maps.MapView mapView, string id, bool visible)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			var nsid = CFString.CreateNative (id);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_bool (this.Handle, Selector.GetHandle ("setLayerVisibilityWithMapView:id:visible:"), mapView__handle__, nsid, visible ? (byte) 1 : (byte) 0);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_bool (this.SuperHandle, Selector.GetHandle ("setLayerVisibilityWithMapView:id:visible:"), mapView__handle__, nsid, visible ? (byte) 1 : (byte) 0);
			}
			CFString.ReleaseNative (nsid);
		}
		[Export ("setStyleWithMapView:style:completed:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public unsafe virtual void SetStyleWithMapView (global::Mapbox.Maps.MapView mapView, string style, [BlockProxy (typeof (ObjCRuntime.Trampolines.NIDActionArity1V1))]global::System.Action<bool> completed)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (style is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (style));
			if (completed is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (completed));
			var nsstyle = CFString.CreateNative (style);
			using var block_completed = Trampolines.SDActionArity1V1.CreateBlock (completed);
			BlockLiteral *block_ptr_completed = &block_completed;
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("setStyleWithMapView:style:completed:"), mapView__handle__, nsstyle, (IntPtr) block_ptr_completed);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("setStyleWithMapView:style:completed:"), mapView__handle__, nsstyle, (IntPtr) block_ptr_completed);
			}
			CFString.ReleaseNative (nsstyle);
		}
		[Export ("sourceExistsWithMapView:id:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual bool SourceExistsWithMapView (global::Mapbox.Maps.MapView mapView, string id)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			var nsid = CFString.CreateNative (id);
			byte ret;
			if (IsDirectBinding) {
				ret = global::ApiDefinition.Messaging.bool_objc_msgSend_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("sourceExistsWithMapView:id:"), mapView__handle__, nsid);
			} else {
				ret = global::ApiDefinition.Messaging.bool_objc_msgSendSuper_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("sourceExistsWithMapView:id:"), mapView__handle__, nsid);
			}
			CFString.ReleaseNative (nsid);
			return ret != 0;
		}
		[Export ("startUserLocationTrackingWithMapView:zoom:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void StartUserLocationTrackingWithMapView (global::Mapbox.Maps.MapView mapView, double zoom)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_Double (this.Handle, Selector.GetHandle ("startUserLocationTrackingWithMapView:zoom:"), mapView__handle__, zoom);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_Double (this.SuperHandle, Selector.GetHandle ("startUserLocationTrackingWithMapView:zoom:"), mapView__handle__, zoom);
			}
		}
		[Export ("StopUserLocationTrackingWithMapView:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void StopUserLocationTrackingWithMapView (global::Mapbox.Maps.MapView mapView)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle (this.Handle, Selector.GetHandle ("StopUserLocationTrackingWithMapView:"), mapView__handle__);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle (this.SuperHandle, Selector.GetHandle ("StopUserLocationTrackingWithMapView:"), mapView__handle__);
			}
		}
		[Export ("styleImageExistsWithMapView:id:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual bool StyleImageExistsWithMapView (global::Mapbox.Maps.MapView mapView, string id)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			var nsid = CFString.CreateNative (id);
			byte ret;
			if (IsDirectBinding) {
				ret = global::ApiDefinition.Messaging.bool_objc_msgSend_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("styleImageExistsWithMapView:id:"), mapView__handle__, nsid);
			} else {
				ret = global::ApiDefinition.Messaging.bool_objc_msgSendSuper_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("styleImageExistsWithMapView:id:"), mapView__handle__, nsid);
			}
			CFString.ReleaseNative (nsid);
			return ret != 0;
		}
		[Export ("updateFillLayerWithMapView:id:sourceId:visible:predicateId:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void UpdateFillLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id, string sourceId, bool visible, string? predicateId)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (sourceId is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (sourceId));
			var nsid = CFString.CreateNative (id);
			var nssourceId = CFString.CreateNative (sourceId);
			var nspredicateId = CFString.CreateNative (predicateId);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle (this.Handle, Selector.GetHandle ("updateFillLayerWithMapView:id:sourceId:visible:predicateId:"), mapView__handle__, nsid, nssourceId, visible ? (byte) 1 : (byte) 0, nspredicateId);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle (this.SuperHandle, Selector.GetHandle ("updateFillLayerWithMapView:id:sourceId:visible:predicateId:"), mapView__handle__, nsid, nssourceId, visible ? (byte) 1 : (byte) 0, nspredicateId);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nssourceId);
			CFString.ReleaseNative (nspredicateId);
		}
		[Export ("updateHeatMapLayerWithMapView:id:visible:intensity:opacity:radius:stops:colors:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void UpdateHeatMapLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id, bool visible, double intensity, double opacity, double radius, NSNumber[] stops, global::UIKit.UIColor[] colors)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (stops is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (stops));
			if (colors is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (colors));
			var nsid = CFString.CreateNative (id);
			var nsa_stops = NSArray.FromNSObjects (stops);
			var nsa_colors = NSArray.FromNSObjects (colors);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_bool_Double_Double_Double_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("updateHeatMapLayerWithMapView:id:visible:intensity:opacity:radius:stops:colors:"), mapView__handle__, nsid, visible ? (byte) 1 : (byte) 0, intensity, opacity, radius, nsa_stops.Handle, nsa_colors.Handle);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_bool_Double_Double_Double_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("updateHeatMapLayerWithMapView:id:visible:intensity:opacity:radius:stops:colors:"), mapView__handle__, nsid, visible ? (byte) 1 : (byte) 0, intensity, opacity, radius, nsa_stops.Handle, nsa_colors.Handle);
			}
			CFString.ReleaseNative (nsid);
			nsa_stops.Dispose ();
			nsa_colors.Dispose ();
		}
		[Export ("updateLineLayerWithMapView:id:sourceId:visible:predicateId:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void UpdateLineLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id, string sourceId, bool visible, string? predicateId)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (sourceId is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (sourceId));
			var nsid = CFString.CreateNative (id);
			var nssourceId = CFString.CreateNative (sourceId);
			var nspredicateId = CFString.CreateNative (predicateId);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle (this.Handle, Selector.GetHandle ("updateLineLayerWithMapView:id:sourceId:visible:predicateId:"), mapView__handle__, nsid, nssourceId, visible ? (byte) 1 : (byte) 0, nspredicateId);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle (this.SuperHandle, Selector.GetHandle ("updateLineLayerWithMapView:id:sourceId:visible:predicateId:"), mapView__handle__, nsid, nssourceId, visible ? (byte) 1 : (byte) 0, nspredicateId);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nssourceId);
			CFString.ReleaseNative (nspredicateId);
		}
		[Export ("updateLineLayerWithMapView:id:sourceId:sourceLayer:visible:color:lineWidth:predicateKey:predicateId:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void UpdateLineLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id, string sourceId, string sourceLayer, bool visible, global::UIKit.UIColor color, double lineWidth, string predicateKey, string? predicateId)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (sourceId is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (sourceId));
			if (sourceLayer is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (sourceLayer));
			var color__handle__ = color!.GetNonNullHandle (nameof (color));
			if (predicateKey is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (predicateKey));
			var nsid = CFString.CreateNative (id);
			var nssourceId = CFString.CreateNative (sourceId);
			var nssourceLayer = CFString.CreateNative (sourceLayer);
			var nspredicateKey = CFString.CreateNative (predicateKey);
			var nspredicateId = CFString.CreateNative (predicateId);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle_Double_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("updateLineLayerWithMapView:id:sourceId:sourceLayer:visible:color:lineWidth:predicateKey:predicateId:"), mapView__handle__, nsid, nssourceId, nssourceLayer, visible ? (byte) 1 : (byte) 0, color__handle__, lineWidth, nspredicateKey, nspredicateId);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_NativeHandle_bool_NativeHandle_Double_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("updateLineLayerWithMapView:id:sourceId:sourceLayer:visible:color:lineWidth:predicateKey:predicateId:"), mapView__handle__, nsid, nssourceId, nssourceLayer, visible ? (byte) 1 : (byte) 0, color__handle__, lineWidth, nspredicateKey, nspredicateId);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nssourceId);
			CFString.ReleaseNative (nssourceLayer);
			CFString.ReleaseNative (nspredicateKey);
			CFString.ReleaseNative (nspredicateId);
		}
		[Export ("updateRasterTileLayerWithMapView:id:visible:minZoom:maxZoom:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void UpdateRasterTileLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id, bool visible, double minZoom, double maxZoom)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			var nsid = CFString.CreateNative (id);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_bool_Double_Double (this.Handle, Selector.GetHandle ("updateRasterTileLayerWithMapView:id:visible:minZoom:maxZoom:"), mapView__handle__, nsid, visible ? (byte) 1 : (byte) 0, minZoom, maxZoom);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_bool_Double_Double (this.SuperHandle, Selector.GetHandle ("updateRasterTileLayerWithMapView:id:visible:minZoom:maxZoom:"), mapView__handle__, nsid, visible ? (byte) 1 : (byte) 0, minZoom, maxZoom);
			}
			CFString.ReleaseNative (nsid);
		}
		[Export ("updateSourceWithMapView:id:geoJson:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void UpdateSourceWithMapView (global::Mapbox.Maps.MapView mapView, string id, string geoJson)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (geoJson is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (geoJson));
			var nsid = CFString.CreateNative (id);
			var nsgeoJson = CFString.CreateNative (geoJson);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle (this.Handle, Selector.GetHandle ("updateSourceWithMapView:id:geoJson:"), mapView__handle__, nsid, nsgeoJson);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle (this.SuperHandle, Selector.GetHandle ("updateSourceWithMapView:id:geoJson:"), mapView__handle__, nsid, nsgeoJson);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nsgeoJson);
		}
		[Export ("updateSymbolLayerWithMapView:id:sourceId:visible:minZoom:predicateId:")]
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public virtual void UpdateSymbolLayerWithMapView (global::Mapbox.Maps.MapView mapView, string id, string sourceId, bool visible, double minZoom, string? predicateId)
		{
			var mapView__handle__ = mapView!.GetNonNullHandle (nameof (mapView));
			if (id is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (id));
			if (sourceId is null)
				ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (sourceId));
			var nsid = CFString.CreateNative (id);
			var nssourceId = CFString.CreateNative (sourceId);
			var nspredicateId = CFString.CreateNative (predicateId);
			if (IsDirectBinding) {
				global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle_NativeHandle_NativeHandle_bool_Double_NativeHandle (this.Handle, Selector.GetHandle ("updateSymbolLayerWithMapView:id:sourceId:visible:minZoom:predicateId:"), mapView__handle__, nsid, nssourceId, visible ? (byte) 1 : (byte) 0, minZoom, nspredicateId);
			} else {
				global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle_NativeHandle_NativeHandle_bool_Double_NativeHandle (this.SuperHandle, Selector.GetHandle ("updateSymbolLayerWithMapView:id:sourceId:visible:minZoom:predicateId:"), mapView__handle__, nsid, nssourceId, visible ? (byte) 1 : (byte) 0, minZoom, nspredicateId);
			}
			CFString.ReleaseNative (nsid);
			CFString.ReleaseNative (nssourceId);
			CFString.ReleaseNative (nspredicateId);
		}
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public unsafe virtual global::System.Action<global::Mapbox.Maps.MapView>? CameraChanged {
			[return: DelegateProxy (typeof (ObjCRuntime.Trampolines.SDActionArity1V2))]
			[Export ("cameraChanged", ArgumentSemantic.Copy)]
			get {
				NativeHandle ret;
				if (IsDirectBinding) {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSend (this.Handle, Selector.GetHandle ("cameraChanged"));
				} else {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSendSuper (this.SuperHandle, Selector.GetHandle ("cameraChanged"));
				}
				return global::ObjCRuntime.Trampolines.NIDActionArity1V2.Create (ret)!;
			}
			[param: BlockProxy (typeof (ObjCRuntime.Trampolines.NIDActionArity1V2))]
			[Export ("setCameraChanged:", ArgumentSemantic.Copy)]
			set {
				using var block_value = Trampolines.SDActionArity1V2.CreateNullableBlock (value);
				BlockLiteral *block_ptr_value = null;
				if (value is not null)
					block_ptr_value = &block_value;
				if (IsDirectBinding) {
					global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle (this.Handle, Selector.GetHandle ("setCameraChanged:"), (IntPtr) block_ptr_value);
				} else {
					global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle (this.SuperHandle, Selector.GetHandle ("setCameraChanged:"), (IntPtr) block_ptr_value);
				}
			}
		}
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public unsafe virtual global::System.Action<NSString>? EmitLog {
			[return: DelegateProxy (typeof (ObjCRuntime.Trampolines.SDActionArity1V3))]
			[Export ("emitLog", ArgumentSemantic.Copy)]
			get {
				NativeHandle ret;
				if (IsDirectBinding) {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSend (this.Handle, Selector.GetHandle ("emitLog"));
				} else {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSendSuper (this.SuperHandle, Selector.GetHandle ("emitLog"));
				}
				return global::ObjCRuntime.Trampolines.NIDActionArity1V3.Create (ret)!;
			}
			[param: BlockProxy (typeof (ObjCRuntime.Trampolines.NIDActionArity1V3))]
			[Export ("setEmitLog:", ArgumentSemantic.Copy)]
			set {
				using var block_value = Trampolines.SDActionArity1V3.CreateNullableBlock (value);
				BlockLiteral *block_ptr_value = null;
				if (value is not null)
					block_ptr_value = &block_value;
				if (IsDirectBinding) {
					global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle (this.Handle, Selector.GetHandle ("setEmitLog:"), (IntPtr) block_ptr_value);
				} else {
					global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle (this.SuperHandle, Selector.GetHandle ("setEmitLog:"), (IntPtr) block_ptr_value);
				}
			}
		}
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public unsafe virtual global::System.Action<global::Mapbox.Maps.MapView>? LocationAnimationCompleted {
			[return: DelegateProxy (typeof (ObjCRuntime.Trampolines.SDActionArity1V2))]
			[Export ("locationAnimationCompleted", ArgumentSemantic.Copy)]
			get {
				NativeHandle ret;
				if (IsDirectBinding) {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSend (this.Handle, Selector.GetHandle ("locationAnimationCompleted"));
				} else {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSendSuper (this.SuperHandle, Selector.GetHandle ("locationAnimationCompleted"));
				}
				return global::ObjCRuntime.Trampolines.NIDActionArity1V2.Create (ret)!;
			}
			[param: BlockProxy (typeof (ObjCRuntime.Trampolines.NIDActionArity1V2))]
			[Export ("setLocationAnimationCompleted:", ArgumentSemantic.Copy)]
			set {
				using var block_value = Trampolines.SDActionArity1V2.CreateNullableBlock (value);
				BlockLiteral *block_ptr_value = null;
				if (value is not null)
					block_ptr_value = &block_value;
				if (IsDirectBinding) {
					global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle (this.Handle, Selector.GetHandle ("setLocationAnimationCompleted:"), (IntPtr) block_ptr_value);
				} else {
					global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle (this.SuperHandle, Selector.GetHandle ("setLocationAnimationCompleted:"), (IntPtr) block_ptr_value);
				}
			}
		}
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public unsafe virtual global::System.Action<LatLng>? LocationUpdate {
			[return: DelegateProxy (typeof (ObjCRuntime.Trampolines.SDActionArity1V4))]
			[Export ("locationUpdate", ArgumentSemantic.Copy)]
			get {
				NativeHandle ret;
				if (IsDirectBinding) {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSend (this.Handle, Selector.GetHandle ("locationUpdate"));
				} else {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSendSuper (this.SuperHandle, Selector.GetHandle ("locationUpdate"));
				}
				return global::ObjCRuntime.Trampolines.NIDActionArity1V4.Create (ret)!;
			}
			[param: BlockProxy (typeof (ObjCRuntime.Trampolines.NIDActionArity1V4))]
			[Export ("setLocationUpdate:", ArgumentSemantic.Copy)]
			set {
				using var block_value = Trampolines.SDActionArity1V4.CreateNullableBlock (value);
				BlockLiteral *block_ptr_value = null;
				if (value is not null)
					block_ptr_value = &block_value;
				if (IsDirectBinding) {
					global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle (this.Handle, Selector.GetHandle ("setLocationUpdate:"), (IntPtr) block_ptr_value);
				} else {
					global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle (this.SuperHandle, Selector.GetHandle ("setLocationUpdate:"), (IntPtr) block_ptr_value);
				}
			}
		}
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public unsafe virtual global::System.Action<global::Mapbox.Maps.MapView>? MapLoaded {
			[return: DelegateProxy (typeof (ObjCRuntime.Trampolines.SDActionArity1V2))]
			[Export ("mapLoaded", ArgumentSemantic.Copy)]
			get {
				NativeHandle ret;
				if (IsDirectBinding) {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSend (this.Handle, Selector.GetHandle ("mapLoaded"));
				} else {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSendSuper (this.SuperHandle, Selector.GetHandle ("mapLoaded"));
				}
				return global::ObjCRuntime.Trampolines.NIDActionArity1V2.Create (ret)!;
			}
			[param: BlockProxy (typeof (ObjCRuntime.Trampolines.NIDActionArity1V2))]
			[Export ("setMapLoaded:", ArgumentSemantic.Copy)]
			set {
				using var block_value = Trampolines.SDActionArity1V2.CreateNullableBlock (value);
				BlockLiteral *block_ptr_value = null;
				if (value is not null)
					block_ptr_value = &block_value;
				if (IsDirectBinding) {
					global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle (this.Handle, Selector.GetHandle ("setMapLoaded:"), (IntPtr) block_ptr_value);
				} else {
					global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle (this.SuperHandle, Selector.GetHandle ("setMapLoaded:"), (IntPtr) block_ptr_value);
				}
			}
		}
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public unsafe virtual global::System.Action<global::Mapbox.Maps.MapView>? StyleLoaded {
			[return: DelegateProxy (typeof (ObjCRuntime.Trampolines.SDActionArity1V2))]
			[Export ("styleLoaded", ArgumentSemantic.Copy)]
			get {
				NativeHandle ret;
				if (IsDirectBinding) {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSend (this.Handle, Selector.GetHandle ("styleLoaded"));
				} else {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSendSuper (this.SuperHandle, Selector.GetHandle ("styleLoaded"));
				}
				return global::ObjCRuntime.Trampolines.NIDActionArity1V2.Create (ret)!;
			}
			[param: BlockProxy (typeof (ObjCRuntime.Trampolines.NIDActionArity1V2))]
			[Export ("setStyleLoaded:", ArgumentSemantic.Copy)]
			set {
				using var block_value = Trampolines.SDActionArity1V2.CreateNullableBlock (value);
				BlockLiteral *block_ptr_value = null;
				if (value is not null)
					block_ptr_value = &block_value;
				if (IsDirectBinding) {
					global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle (this.Handle, Selector.GetHandle ("setStyleLoaded:"), (IntPtr) block_ptr_value);
				} else {
					global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle (this.SuperHandle, Selector.GetHandle ("setStyleLoaded:"), (IntPtr) block_ptr_value);
				}
			}
		}
		[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
		public unsafe virtual global::System.Action<bool>? ViewportUpdate {
			[return: DelegateProxy (typeof (ObjCRuntime.Trampolines.SDActionArity1V1))]
			[Export ("viewportUpdate", ArgumentSemantic.Copy)]
			get {
				NativeHandle ret;
				if (IsDirectBinding) {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSend (this.Handle, Selector.GetHandle ("viewportUpdate"));
				} else {
					ret = global::ApiDefinition.Messaging.NativeHandle_objc_msgSendSuper (this.SuperHandle, Selector.GetHandle ("viewportUpdate"));
				}
				return global::ObjCRuntime.Trampolines.NIDActionArity1V1.Create (ret)!;
			}
			[param: BlockProxy (typeof (ObjCRuntime.Trampolines.NIDActionArity1V1))]
			[Export ("setViewportUpdate:", ArgumentSemantic.Copy)]
			set {
				using var block_value = Trampolines.SDActionArity1V1.CreateNullableBlock (value);
				BlockLiteral *block_ptr_value = null;
				if (value is not null)
					block_ptr_value = &block_value;
				if (IsDirectBinding) {
					global::ApiDefinition.Messaging.void_objc_msgSend_NativeHandle (this.Handle, Selector.GetHandle ("setViewportUpdate:"), (IntPtr) block_ptr_value);
				} else {
					global::ApiDefinition.Messaging.void_objc_msgSendSuper_NativeHandle (this.SuperHandle, Selector.GetHandle ("setViewportUpdate:"), (IntPtr) block_ptr_value);
				}
			}
		}
	} /* class MapViewFactory */
}
